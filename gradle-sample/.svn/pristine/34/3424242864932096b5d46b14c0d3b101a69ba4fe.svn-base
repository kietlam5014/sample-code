package hp.oobe;

import hp.oobe.utilities.Cryptography;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.HashMap;


import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.xml.sax.InputSource;

import android.content.ContentProvider;
import android.content.ContentValues;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteQueryBuilder;
import android.net.Uri;
import android.provider.Settings.Secure;

import android.util.Log;

public class RetailerProvider extends ContentProvider {

	private static final UriMatcher uriMatcher;
	private static final String AUTHORITY = "hp.oobe.retailer";
	private static final String ENTITY = "retailer";
	private static final int ALL_ROWS = 1;
	private static final int VERSION = 1;
	

	private static final String COLUMN_RETAILER_CODE = "retailer_code";
	private static final String COLUMN_COUNTRY_CODE = "country_code";
	
	private static HashMap<String, String> retailerProjectionMap = null;
	
	static {
		
		uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
		uriMatcher.addURI(AUTHORITY, ENTITY, ALL_ROWS);
		
		retailerProjectionMap = new HashMap<String, String>();

		retailerProjectionMap.put(COLUMN_COUNTRY_CODE, COLUMN_COUNTRY_CODE);
		retailerProjectionMap.put(COLUMN_RETAILER_CODE, COLUMN_RETAILER_CODE);
	}
	
	private static class DatabaseHelper extends SQLiteOpenHelper {
		
		DatabaseHelper(Context context) {
			
			super(context, ENTITY, null, VERSION);

		}
		
		@Override
		public void onCreate(SQLiteDatabase db) {
			
			Log.d(Consts.TAG, "Data Provider will create a temporary database.");	
			
			db.execSQL("CREATE TABLE " + ENTITY + "(" + 
												COLUMN_COUNTRY_CODE + " LONGTEXT," +
												COLUMN_RETAILER_CODE + " LONGTEXT" +
					");");
			
		}
		
		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			
			Log.d(Consts.TAG, "Data Provider will update the database.");
			
			db.execSQL("DROP TABLE IF EXISTS " + ENTITY);
			onCreate(db);
			
		}
		
	}//#DatabaseHelper

	private InputSource inputSource = null;
	private DatabaseHelper dbHelper = null;
	private String countryCode = null,
					retailerCode = null;
	
	private String getContentFromRegistrationFile(String registrationFile, String xPathExpression) {
		
		String content = null;
		inputSource = new InputSource(new StringReader(registrationFile));
		
		if (inputSource != null && xPathExpression != null && !xPathExpression.equals("")) {
		
			XPath xpath = XPathFactory.newInstance().newXPath();
			
			try {
				
				content = (String) xpath.evaluate(xPathExpression, inputSource, XPathConstants.STRING);

			} catch (XPathExpressionException e) {
				
				Log.d(Consts.TAG, "Problem evaluating the expression " + xPathExpression);
				e.printStackTrace();
				
			}
			
		}
		
		return content;
		
	}
		
	private String getCountryCode(String registrationFile) {
		return getContentFromRegistrationFile(registrationFile, "/registration-request/payload/registration/FoundationBlock/@addr_country_cd");
		
	}
	
	private String getRetailerCode(String retailerFile) {
		SharedPreferences preferences = this.getContext().getSharedPreferences(Consts.PREFERENCES, 0); 
		return preferences.getString("retailerCode", "oopscouldntfindretailer");
	}
	
	private String openRegistrationFile() {
		
		String result = null;
		String pwd = Secure.getString(getContext().getContentResolver(), Secure.ANDROID_ID);
		BufferedReader reader = null;
		
		try {
			
			File f1 = new File(Consts.FILES_ROOT + Consts.FILE_NAME_REQUEST_REGISTRATION);
			FileInputStream fin = new FileInputStream(f1);
			reader = new BufferedReader(new InputStreamReader(fin));
			StringBuilder sb = new StringBuilder();
			String line = null;
			
			while((line = reader.readLine()) != null) {
				sb.append(line).append("\n");
			}
			
			result = sb.toString();
			
			if (reader != null) {
				reader.close();
			}
			
		} catch (FileNotFoundException e1) {
			
			Log.d(Consts.TAG, "The file " + Consts.FILE_NAME_REQUEST_REGISTRATION + " was not found while attempting to open it.");
			e1.printStackTrace();
			
		} catch (IOException e) {
			
			Log.d(Consts.TAG, "There was a problem while trying to parse " + Consts.FILE_NAME_REQUEST_REGISTRATION);
			e.printStackTrace();
			
		} 
		
		if (result != null) {
			
			result = Cryptography.decrypt(result, pwd);
			/*
			 * The message stored is an XML file with the prefix message=
			 * Removing the message= so it doesn't cause exception when we try to 
			 * parse the XML file.
			 */
			result = result.substring(8);
			
		}
		
		return result;
		
	}
	
	private void queryRegistration() {
		
		String registrationFile = openRegistrationFile();
		
		if (registrationFile == null) {
			
			Log.d(Consts.TAG, 
					"Data Provider got a request to open registration file. But a problem happened during the operation.");
			
		} else {
			
			countryCode = getCountryCode(registrationFile);
			// Later change to prefs.xml or wherever we persist information about the retailer
			retailerCode = getRetailerCode(registrationFile);
			
		}
		
	}//#queryRegistration
	
	private void createOrUpdateRow(SQLiteDatabase db) {
		// Do not test for existence of country code and retailer code because
		// it will create and update null values and break RetailerConsumer
			String sqlInsert = "INSERT INTO " + ENTITY + " Values ('" + 
								countryCode + "','" + 
								retailerCode + "');";
			
			db.delete(ENTITY, null, null);
			db.execSQL(sqlInsert);
			
			Log.d(Consts.TAG, "Data provider included a row into the temporary database.");
			
		
	}//#createOrUpdate
	
	/*
	 * ============================================================================================
	 * PUBLIC MEMBERS
	 * ============================================================================================
	 */
	
	@Override
	public boolean onCreate() {
		
		//android.os.Debug.waitForDebugger();

		dbHelper = new DatabaseHelper(getContext());
		
		return true;
		
	}
	
	@Override
	public int delete(Uri URI, String arg1, String[] arg2) {
		// TODO Auto-generated method stub
		return 0;
	}
	
	@Override
	public String getType(Uri uri) {
		
		switch(uriMatcher.match(uri)) {
		
			case ALL_ROWS:
				break;
			default: 
				throw new IllegalArgumentException("Unsupported URI");
		
		}
		
		return null;
		
	}

	@Override
	public Uri insert(Uri arg0, ContentValues arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,
			String sort) {
		
		Cursor cursor = null;
		SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
		qb.setTables(ENTITY);
		qb.setProjectionMap(retailerProjectionMap);
		
		SQLiteDatabase db = dbHelper.getReadableDatabase();
		
		switch(uriMatcher.match(uri)) {
		
			case ALL_ROWS:
				queryRegistration();
				createOrUpdateRow(db);
				break;
		
		}
		
		cursor = qb.query(db, projection, selection, selectionArgs, null, null, sort);
		
		return cursor;
	}

	@Override
	public int update(Uri arg0, ContentValues arg1, String arg2, String[] arg3) {
		// TODO Auto-generated method stub
		return 0;
	}

}
