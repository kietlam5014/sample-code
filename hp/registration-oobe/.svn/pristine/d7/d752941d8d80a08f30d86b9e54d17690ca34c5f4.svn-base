package hp.oobe.service;

import hp.oobe.Consts;
import hp.oobe.RegistrationNotificationReceiver;
import hp.oobe.RegistrationScheduleReceiver;
import hp.oobe.Util;
import hp.oobe.tasks.BeaconTask;
import hp.oobe.tasks.HTTPTask;
import hp.oobe.tasks.IOOBETask;
import hp.oobe.tasks.OTATask;
import hp.oobe.tasks.RegistrationTask;

import java.util.ArrayList;
import java.util.Calendar;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.IBinder;
import android.provider.Settings.Secure;
import android.util.Log;


public class Registration extends Service {
	
	private SharedPreferences preferences = null;
	private boolean isRun = false;
	private Util util = null;
	
	private ArrayList<IOOBETask> tasks = new ArrayList<IOOBETask>();
	

	private String getStatusIDForTaskName(String taskName) {
		
		String ID = "";
		
		if (taskName.equals(Consts.PREFERENCE_ENDPOINT)) {
			
			ID = Consts.PREFERENCE_REGISTRATION_SENT;
			
		} else if (taskName.equals(Consts.PREFERENCE_ENDPOINT_OTA)) {
			
			ID = Consts.PREFERENCE_OTA_SENT;
			
		} else if (taskName.equals(Consts.PREFERENCE_ENDPOINT_BEACON)) {
			
			ID = Consts.PREFERENCE_BEACON_SENT;
			
		} else if (taskName.equals(Consts.PREFERENCE_ENDPOINT_BEACON_POST_OOBE)) {
			
			ID = Consts.PREFERENCE_BEACON_POST_OOBE_SENT;
			
		}
		
		return ID;
		
	}//#getStatusIDForTaskName
	
	private void disableRegistrationReceiver() {
		
		PackageManager pm = this.getPackageManager();
		ComponentName name = new ComponentName(this, RegistrationScheduleReceiver.class);
		
		pm.setComponentEnabledSetting(name,  PackageManager.COMPONENT_ENABLED_STATE_DISABLED, PackageManager.DONT_KILL_APP);
		
		Log.d(Consts.TAG, "RegistrationReceiver was disabled");
		
	}
	
	private void gatherTasks() {

		HTTPTask registration = null, ota = null, beaconOOBE = null, beaconPostOOBE = null;

		try {
			String keyToDecrypt = Secure.getString(getContentResolver(),
					Secure.ANDROID_ID);
			Context mContext = getApplicationContext();
			if (preferences == null) {
				
				preferences = getSharedPreferences(Consts.PREFERENCES, 0);
				
			}
			
			boolean beaconSent = false, 
					beaconPostOOBESent = false, 
					registrationSent = false,
					otaSent = false;
			
			registrationSent = preferences.getBoolean(Consts.PREFERENCE_REGISTRATION_SENT, false);
			beaconSent = preferences.getBoolean(Consts.PREFERENCE_BEACON_SENT, false);
			beaconPostOOBESent = preferences.getBoolean(Consts.PREFERENCE_BEACON_POST_OOBE_SENT, false);
			otaSent = preferences.getBoolean(Consts.PREFERENCE_OTA_SENT, false);
			
			// Getting the URLs (endpoints) from the configuration file
			String endPointRegistration = null, endPointOTA = null, endPointOTAQuery = null, endPointBeaconOOBE = null, endPointBeaconPostOOBE = null;

			endPointRegistration = preferences.getString(
					Consts.PREFERENCE_ENDPOINT, null);
			endPointOTA = preferences.getString(Consts.PREFERENCE_ENDPOINT_OTA,
					null);
			endPointOTAQuery = preferences.getString(
					Consts.PREFERENCE_ENDPOINT_OTA_QUERY, null);
			endPointBeaconOOBE = preferences.getString(
					Consts.PREFERENCE_ENDPOINT_BEACON, null);
			endPointBeaconPostOOBE = preferences.getString(
					Consts.PREFERENCE_ENDPOINT_BEACON_POST_OOBE, null);

			/*
			 * Creating the tasks (only if the execute successfully previously).
			 * Unfortunately, there is a dependency of order here. OTA has to run
			 * before the Registration because it relies on the born on date (bod)
			 * which is retrieved in the OTATask.
			 */
			if (!otaSent && endPointOTA != null) {

				ota = new OTATask(Consts.PREFERENCE_ENDPOINT_OTA, endPointOTA,
						endPointOTAQuery, keyToDecrypt);
				tasks.add((IOOBETask) ota);
				Log.d(Consts.TAG, "OTA task created.");

			}

			if (!beaconSent && endPointBeaconOOBE != null) {

				beaconOOBE = new BeaconTask(mContext,
						Consts.PREFERENCE_ENDPOINT_BEACON, endPointBeaconOOBE,
						keyToDecrypt);
				tasks.add((IOOBETask) beaconOOBE);
				Log.d(Consts.TAG, "Beacon (OOBE) task created.");

			}

			if (!beaconPostOOBESent && endPointBeaconPostOOBE != null) {

				beaconPostOOBE = new BeaconTask(mContext,
						Consts.PREFERENCE_ENDPOINT_BEACON_POST_OOBE,
						endPointBeaconPostOOBE, keyToDecrypt);
				tasks.add((IOOBETask) beaconPostOOBE);
				Log.d(Consts.TAG, "Beacon (Post OOBE) task created.");
				
			}
			if (!registrationSent && endPointRegistration != null) {

				registration = new RegistrationTask(Consts.PREFERENCE_ENDPOINT,
						endPointRegistration, keyToDecrypt);
				tasks.add((IOOBETask) registration);
				Log.d(Consts.TAG, "Registration task created.");

			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}// #gatherTasks

	public void onCreate() {
		super.onCreate();
		
		if (util == null) {
			
			util = new Util();
			
		}
		
		//android.os.Debug.waitForDebugger();
		Log.d(Consts.TAG, "Service started");	
	}
	
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		Log.d(Consts.TAG, "Registration service-->HEY I WOKE UP" );
		if(isRun==true)
		{
			 return START_NOT_STICKY;			
		}
		isRun=true;
		preferences = getSharedPreferences(Consts.PREFERENCES, 0);

		gatherTasks();
		
		Log.d(Consts.TAG, "Numbers of tasks to do: " + tasks.size());
		
		/*
		 * If the service was woken up by the UI on the app grid it also means that the retry logic 
		 * will start from 0 again. In other words, if he service was scheduled previously it will
		 * be cancelled and an attempt will be made right away.
		 */
		String touchpoint = intent.getStringExtra(Consts.EXTRA_TOUCHPOINT_UI);
		if (touchpoint != null) {
			
			Log.d(Consts.TAG, "The HP OOBE UI woke up the service.");
			
			// Removing any previous scheduled intent to run this service.
			Intent myIntent = new Intent(this, RegistrationScheduleReceiver.class);
			PendingIntent pendingIntent = null;
			//	pendingIntent = PendingIntent.getService(Registration.this, 0, myIntent, 0);
				pendingIntent = PendingIntent.getBroadcast(Registration.this, 0, myIntent, 0);
			AlarmManager alarmManager = (AlarmManager)getSystemService(ALARM_SERVICE);
				alarmManager.cancel(pendingIntent);
			
			// Reseting the attempts. Clean Slate.
			SharedPreferences.Editor editor = preferences.edit();
				editor.putInt(Consts.PREFERENCE_CURRENT_ATTEMPT, -2);
				editor.commit();
			
		} 
		
		// Checking if there is any task pending successful execution 		
		if (tasks.size() == 0) {
			
			Log.d(Consts.TAG, "All pending tasks were finished. No need to run the service.");
			stopSelf();
			
		} else {
			int currentAttempt = preferences.getInt(
					Consts.PREFERENCE_CURRENT_ATTEMPT, -2);
			Log.d(Consts.TAG,
					"Service will make an attempt to process the tasks."
							+ currentAttempt);

			if (currentAttempt == -2) {
				
				SharedPreferences.Editor editor = preferences.edit();
				
				editor.putInt(Consts.PREFERENCE_CURRENT_ATTEMPT, -1);
				editor.commit();
				
				runTasks(); 
				
			} else {
				
				currentAttempt = preferences.getInt(Consts.PREFERENCE_CURRENT_ATTEMPT, 6);
				
				Log.d(Consts.TAG, "Service woke up again. Current Attempt:" + (currentAttempt+1));
				
				if (currentAttempt < 4) {
					
					runTasks();
					
				} else {
					
					Log.d(Consts.TAG, "Reached the maximum numbers of attempt. No reschedule will be made.");
					stopSelf();
					
				}
				
			}
			
		}
		
		return START_NOT_STICKY;
	}
	
	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}

	public boolean isOnline() {
		
		ConnectivityManager connectivityManager = 
				(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo activeInfo = connectivityManager.getActiveNetworkInfo();
		
		return (activeInfo != null && activeInfo.isConnected());
		
	}
	
	private void scheduleServiceIfStillPossible() {
		
		try {
			int currentAttempt = 0;
			SharedPreferences settings = getSharedPreferences(Consts.PREFERENCES, 0);
			
			int size = Consts.NUMBER_OF_HOURS_TO_TRY.length;
			
			currentAttempt = settings.getInt(Consts.PREFERENCE_CURRENT_ATTEMPT, size);
			Log.d(Consts.TAG, "currentAttempt"+currentAttempt);
			currentAttempt++;
			
			// Updating the current Attempt.
			SharedPreferences.Editor editor = settings.edit();
			editor.putInt(Consts.PREFERENCE_CURRENT_ATTEMPT, currentAttempt);
			editor.commit();
			
			if (currentAttempt >= size) {
				
				Log.d(Consts.TAG, "Reached the maximum number of attempts.");
				disableRegistrationReceiver();
				
			} else {

				Intent myIntent = new Intent(this, RegistrationScheduleReceiver.class);
				PendingIntent pendingIntent = null;
				pendingIntent = PendingIntent.getBroadcast(Registration.this, 0, myIntent, 0);
				
				AlarmManager alarmManager = (AlarmManager)getSystemService(ALARM_SERVICE);
				
				Calendar calendar = Calendar.getInstance();
				calendar.setTimeInMillis(System.currentTimeMillis());
				calendar.add(Calendar.HOUR, 
						Consts.NUMBER_OF_HOURS_TO_TRY[currentAttempt]);

				alarmManager.set(AlarmManager.RTC_WAKEUP,
						calendar.getTimeInMillis(), pendingIntent);

				Log.d(Consts.TAG, "Service was scheduled. Next attempt: "
						+ calendar.getTime().toString());
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
	}
	
	
	@SuppressWarnings("unchecked")
	private void runTasks() {
		
		Log.d(Consts.TAG, "Service attempting to run the tasks.");
		
		TaskRunner runner = new TaskRunner();
			runner.execute(tasks);
			
	}

	private String readMessage(String keyToDecryptContent) {

		return util.readContentOfFileAndDecrypt(Consts.FILES_ROOT
				+ Consts.FILE_NAME_REQUEST_REGISTRATION, keyToDecryptContent);

	}

	/*
	 * Runs all the tasks that are needed.
	 */
	private class TaskRunner extends AsyncTask<ArrayList<IOOBETask>, String, String> {
		
		ArrayList<IOOBETask> tasksToRun = null;

		@Override
		protected String doInBackground(ArrayList<IOOBETask>... args) {

			tasksToRun = args[0];

			if (preferences == null) {

				preferences = getSharedPreferences(Consts.PREFERENCES, 0);

			}

			SharedPreferences.Editor editor = preferences.edit();

			IOOBETask otaTask = null, registrationTask = null, beaconTask = null;

			for (IOOBETask task : tasksToRun) {

				if (task.getName() == Consts.PREFERENCE_ENDPOINT_OTA) {

					otaTask = task;

				} else if (task.getName() == Consts.PREFERENCE_ENDPOINT) {

					registrationTask = task;

				} else if (task.getName() == Consts.PREFERENCE_ENDPOINT_BEACON) {

					beaconTask = task;

				}

				try {

					if (task == beaconTask || task == registrationTask) {
						// Make sure OTA is finished(either OTA sccess or
						// retrial finished)
						boolean shouldRunBeaconAndReg = true;

						// If OTA is scheduled to run;ran but it was not ok.
						// Then we don't attempt to send Registration.
						if (otaTask != null && otaTask.getStatus() == false) {
							shouldRunBeaconAndReg = false;

						} else if (otaTask != null
								&& otaTask.getStatus() == true) {
							// OTA finished, reset retry count
							resetRegistrationRetryCount();
						}

						if (shouldRunBeaconAndReg || isLastTimeRunning()) {

							task.run();
							Log.d(Consts.TAG,
									"Status of the task " + task.getName()
											+ " was " + task.getStatus());

						} else {

							task.setStatus(false);

						}

						if (isLastTimeRunning() && otaTask != null
								&& otaTask.getStatus() == false) {

							otaTask.setStatus(true); // This it. No more OTA.
							resetRegistrationRetryCount();

						}

					} else { // All other tasks. Just run it.

						task.run();
						Log.d(Consts.TAG,
								"Status of the task " + task.getName()
										+ " was " + task.getStatus());

					}

				} catch (Exception e) {

					e.printStackTrace();
					Log.d(Consts.TAG,
							"Problem while running the task " + task.getName());

				}

			}

			// if at least one task failed. Need to re-schedule the service.
			boolean allPassed = true;
			for (IOOBETask task : tasksToRun) {

				editor.putBoolean(getStatusIDForTaskName(task.getName()),
						task.getStatus());

				if (task.getStatus() == false) {

					allPassed = false;
					
					Log.d(Consts.TAG,
							"One or more tasks returned status == false. Service will have to run again.");

					scheduleServiceIfStillPossible();
					stopSelf();

					break;

				}

			}
			
			/*
			 * If everything passed there is no need to keep the RegisrationSchedulerReceiver waking up 
			 * after BOOT_COMPLETED.
			 */
			if (allPassed) {
				
				disableRegistrationReceiver();
				
			}

			editor.commit();
			isRun=false;
			return null;
		}// #doInBackground

		private void resetRegistrationRetryCount() {
			SharedPreferences.Editor editor = preferences.edit();
			editor.putInt(Consts.PREFERENCE_CURRENT_ATTEMPT, -1);
			editor.commit();
			Log.d(Consts.TAG, "resetting retry");

		}

		private boolean isLastTimeRunning() {
			int currentAttempt = preferences.getInt(
					Consts.PREFERENCE_CURRENT_ATTEMPT, 6);
			int size = Consts.NUMBER_OF_HOURS_TO_TRY.length;
			if (currentAttempt >= (size - 2))// Retry allowed from arraysize
												// minus -2,
												// since currentAttempt starts
												// from -1;
				// currentAtempt will be -1,0,1,2,3
				return true;
			return false;
		}

		@Override
		protected void onPostExecute(String result) {
			
			
		}
		
	}//#MessageUploader.class
}
