package hp.oobe;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;


import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Configuration;

import android.os.Bundle;


import android.util.Log;

import android.view.View;
import android.view.View.OnLongClickListener;
import android.webkit.ConsoleMessage;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.Toast;

import hp.oobe.Registration;
import hp.oobe.Registration.RequestCallback;
@SuppressLint("SetJavaScriptEnabled")
public class HomeActivity extends Activity {
	

	
	WebView webview = null;
	Registration registration = null;
	BroadcastReceiver receiver=null;
	//do not launch DropBox App if from launcher..
	private boolean appInstalled(String packageName) {
		boolean appInstalled = false;
		PackageManager  pm = getPackageManager();
		try {
			pm.getPackageInfo(packageName, PackageManager.GET_ACTIVITIES);
			appInstalled = true;
		} catch (NameNotFoundException e) {
			appInstalled = false;
		}
		return appInstalled;
		
	}

	private void init(Bundle savedInstanceState) {

	//	setContentView(R.layout.activity_main);
		//android.os.Debug.waitForDebugger();

		if (webview == null) {
			
			/*
			 * workaround to avoid the UI having strange behavior when the user turns 
			 * the screen off and on. This prevents the buttons to be repositioned. 
			 */
			IntentFilter intentFilter = new IntentFilter(Intent.ACTION_SCREEN_ON);
			receiver=new BroadcastReceiver() {
				
				@Override
				public void onReceive(Context context, Intent intent) {
					if (intent.getAction().equals(Intent.ACTION_SCREEN_ON)) {

						if(webview!=null)
						{
							registration.closeInputKeyboard();
							webview.loadUrl("javascript:onConfigurationChanged();");						
						}
					}
				}
			};
			registerReceiver(receiver, intentFilter);
			
			RegistrationNotificationManager nManager = new RegistrationNotificationManager(this);
			nManager.removeTicker();
			
			SharedPreferences preferences = getSharedPreferences(Consts.PREFERENCES, 0);
			SharedPreferences.Editor editor = preferences.edit();
			int currentRun = preferences.getInt(Consts.PREFERENCE_HOW_MANY_TIMES_RAN, 1);
			currentRun++;
			
			editor.putInt(Consts.PREFERENCE_HOW_MANY_TIMES_RAN, currentRun);
			
			
						
			editor.commit();


			webview = (WebView) findViewById(R.id.webview);
			registration.addView(webview);

			WebSettings settings = webview.getSettings();
			settings.setJavaScriptEnabled(true);
			settings.setAllowUniversalAccessFromFileURLs(true);
			settings.setAllowFileAccessFromFileURLs(true);
			settings.setDatabaseEnabled(true);
			settings.setDefaultTextEncodingName("UTF-8");
		//	settings.setUseWideViewPort(true);
			webview.addJavascriptInterface(registration, "registrationAndroid");
			webview.setOnLongClickListener(new OnLongClickListener() {		
				@Override
				public boolean onLongClick(View v) {
					// TODO Auto-generated method stub
					return true;
				}
			});
			webview.setWebChromeClient(new WebChromeClient() {
				public boolean onConsoleMessage(ConsoleMessage cm) {
					Log.d(Consts.TAG, cm.message() + "(" + cm.sourceId() + ". Line: " + cm.lineNumber() + ")");
					return true;
				}
			});
				
			webview.loadUrl("file:///android_asset/home.html");
			
    		webview.setWebViewClient(new WebViewClient() {
    	
    		     
  				@Override
  				public void onPageFinished(WebView view, String url) {
  					try {
  						registration.IsWait = false;
						//view.loadUrl("javascript: removeAviate();");
						webview.removeJavascriptInterface("registrationAndroid");
						webview.addJavascriptInterface(registration, "registrationAndroid");
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
  				}
  				
  	    	});
		}
		/*
		View decorView = getWindow().getDecorView();
		webview.setOnSystemUiVisibilityChangeListener
		
		        (new View.OnSystemUiVisibilityChangeListener() {
		    @Override
		    public void onSystemUiVisibilityChange(int visibility) {
		        // Note that system bars will only be "visible" if none of the
		        // LOW_PROFILE, HIDE_NAVIGATION, or FULLSCREEN flags are set.
		        if ((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) {
		            // TODO: The system bars are visible. Make any desired
		            // adjustments to your UI, such as showing the action bar or
		            // other navigational controls.
		        	int i=0;
		        } else {
		            // TODO: The system bars are NOT visible. Make any desired
		            // adjustments to your UI, such as hiding the action bar or
		            // other navigational controls.
		        	int i=0;
		        }
		    }
		});
		*/
		//  int INVISBLE = 0x00400000|0x00200000|0x01000000|0x00010000;//

	//	webview.setSystemUiVisibility(INVISBLE
				//    View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
		           // | 
		         //   View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar
		           // | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar
		            // remove the following flag for version < API 19
		      //    | View.SYSTEM_UI_FLAG_IMMERSIVE
		         //   |View.STATUS_BAR_DISABLE_RECENT|
		          //  View.STATUS_BAR_DISABLE_BACK|
		          //  View.STATUS_BAR_DISABLE_HOME
		       //     ); 
	}
	
	@Override
	protected void onCreate(final Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		Configuration config = this.getResources().getConfiguration();
		config.fontScale = 1.0f;
		this.getResources().updateConfiguration(config,
				this.getResources().getDisplayMetrics());
		setContentView(R.layout.activity_2);
		registration = new Registration(this,null);
		registration.adapterUI();
		PackageManager localPackageManager = getPackageManager();
		
		PackageInfo storeAppInfo=null;
			try {
				 storeAppInfo = localPackageManager.getPackageInfo("com.google.android.gms", PackageManager.GET_SERVICES);
			} catch (NameNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				storeAppInfo=null;
			}

		
		if(storeAppInfo!=null)
		{
			init( savedInstanceState);
		}
		else
		{
			RequestCallback Callback =  registration.new RequestCallback() {
				@Override
				public void requestNotify(Boolean isSucceed) {
	             if(isSucceed)
	             {
	            	 init( savedInstanceState);
	            	 

	     			
	             }
				}
			};
			registration.dialogCta(savedInstanceState, Callback);	
			

			
		}
	}
	
	@Override 
	public void onConfigurationChanged(Configuration newConfig) {
		registration.closeInputKeyboard();
		super.onConfigurationChanged(newConfig);

		if(webview!=null)
		{
			
			webview.loadUrl("javascript: onConfigurationChanged();");
		}
	}
	
	@Override
	protected void onSaveInstanceState(Bundle outState )
	{
		super.onSaveInstanceState(outState);
		//webview.saveState(outState);
	}
	@Override
	public void onBackPressed()
	{
		super.onBackPressed();

	
	}
/*
	@Override
	protected void onActivityResult(int requestCode, int resultCode,
			Intent dropbox_intent) {
		Log.d(Consts.TAG, "onActivityResult");
		super.onActivityResult(requestCode, resultCode, dropbox_intent);
		if (requestCode == Consts.TAG_DROPBOX) {
			try {
				if (dropbox_intent.hasExtra("EXTRA_OOBE_LOGIN_RESULT")) {
					int dropbox_result = dropbox_intent.getIntExtra(
							"EXTRA_OOBE_LOGIN_RESULT", 0);
					switch (dropbox_result) {
					case 1:

						break; // User is logged in
					case 2:

						break; // User pressed the "No thanks" button
					case 3:

						break; // User pressed the back button
					default:

						break;

					}
					registration.resultDropbox=dropbox_result;
					registration.setSharedPreference(Consts.DROPBOX,
							String.valueOf(dropbox_result));
				} else {

				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {
				Intent intent = getPackageManager().getLaunchIntentForPackage(
						"com.hp.android.launcher.hplauncher");
				if (intent != null) {
					
					startActivity(intent);
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				System.out
						.println("no com.hp.android.launcher.hplauncher installed");
				e.printStackTrace();
			}
		
				registration.IsWait = false;
				Log.d(Consts.TAG, "closeApplication in callback");
				registration.closeApplication(false);

			
			
		}

	}
	*/
	@Override
	public void onDestroy()
	{
		registration.backUI();
		if(receiver!=null)
		{
			unregisterReceiver(receiver);
		}
		super.onDestroy();	
	}
	
	@Override
	public void onWindowFocusChanged(boolean hasFocus){
		super.onWindowFocusChanged( hasFocus);

	}

	@Override
	protected void onRestoreInstanceState(Bundle savedInstanceState)
	{
		super.onSaveInstanceState(savedInstanceState);
		//webview.restoreState(savedInstanceState);
	}
	
	public void onPostFinished(String result) {
		
	}
}
